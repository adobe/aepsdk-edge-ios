on: 
  pull_request_target:
    types: [opened, reopened, synchronize, assigned, edited, ready_for_review]
    paths-ignore: 
      - '.circleci/**'
      - '.githooks/**'
      - '.github/**'
      - 'Documentation/**'
      - 'Script/**'
      - 'Makefile'
      - '*.md'

jobs:
  trigger-circleci:
    runs-on: ubuntu-latest
    steps:
      - name: CircleCI trigger for pull requests checks
        id: trigger-circleci
        uses: CircleCI-Public/trigger-circleci-pipeline-action@v1.1.0
        env:
          CCI_TOKEN: ${{ secrets.CCI_TOKEN }}

      - name: Wait CircleCI pipeline status
        id: wait-circleci
        run: |
          echo CircleCI pipeline triggered with ID $PIPELINE_ID, waiting for it to finish before reporting PR checks status
          STATUS=$(curl "https://circleci.com/api/v2/pipeline/$PIPELINE_ID/workflow?circle-token=$CCI_TOKEN" | jq -r '.items[].status')

          while [ "$STATUS" == "running" ]; do
            echo CircleCI workflow still running
            sleep 10
            STATUS=$(curl -s "https://circleci.com/api/v2/pipeline/$PIPELINE_ID/workflow?circle-token=$CCI_TOKEN" | jq -r '.items[].status')
          done

          echo CircleCI finally done, workflow status: $STATUS
          echo CCI_WORKFLOW_STATUS=$STATUS >> $GITHUB_OUTPUT
          
        env:
         # PIPELINE_ID: ${{ steps.trigger-circleci.outputs.id }}
          PIPELINE_ID: "ace0e4d6-5e0a-4492-8676-678c0eca7547"
          CCI_TOKEN: ${{ secrets.CCI_TOKEN }}

      - name: Check CircleCI workflow status per job
        id: log-circleci-jobs-status
        run: |
          WORKFLOW_ID=$(curl -s "https://circleci.com/api/v2/pipeline/$PIPELINE_ID/workflow?circle-token=$CCI_TOKEN" | jq -r '.items[].id')
          JOBS=$(curl "https://circleci.com/api/v2/pipeline/$WORKFLOW_ID/workflow?circle-token=$CCI_TOKEN")
          echo $RESPONSE | jq '.items[] | "Job \(.name) finished with status: \(.status)"'

          if [[ "$CCI_WORKFLOW_STATUS" == "success" ]]; then
            echo PR checks passed
            exit 0
          else
            echo PR checks failed, see CircleCI for details
            exit 1
          fi

        env:
          # PIPELINE_ID: ${{ steps.trigger-circleci.outputs.id }}
          PIPELINE_ID: "ace0e4d6-5e0a-4492-8676-678c0eca7547"
          CCI_TOKEN: ${{ secrets.CCI_TOKEN }}
          CCI_WORKFLOW_STATUS: ${{ steps.wait-circleci.outputs.CCI_WORKFLOW_STATUS }}