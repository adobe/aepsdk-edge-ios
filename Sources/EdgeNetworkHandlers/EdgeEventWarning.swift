//
// Copyright 2020 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.
//

import Foundation

// MARK: - EdgeEventWarning

/// Messages from upstreams which could signal that a partial processing of the request occurred
struct EdgeEventWarning: Codable {

    /// A URI reference (RFC3986) that identifies the problem type, following the format https://ns.adobe.com/aep/errors/<ERROR-CODE>.
    let type: String?

    /// The HTTP status code generated by the server for this occurrence of the problem.
    let status: Int?

    /// A short, human-readable summary of the problem type.
    let title: String?

    /// The warning report
    let report: EdgeEventWarningReport?

    // MARK: - Codable
    enum CodingKeys: String, CodingKey {
        case type
        case status
        case title
        case report
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let unwrapped = title { try container.encodeIfPresent(unwrapped, forKey: .title) }
        if let unwrapped = status { try container.encodeIfPresent(unwrapped, forKey: .status) }
        if let unwrapped = type { try container.encodeIfPresent(unwrapped, forKey: .type) }
        if let unwrapped = report, unwrapped.cause != nil { try container.encodeIfPresent(unwrapped, forKey: .report) }
    }
}

// MARK: - EdgeEventWarningReport

/// A map of additional properties that aid in debugging such as the request ID or the org ID. In some cases, it might contain data specific to the error at hand, such as a list of validation errors.
struct EdgeEventWarningReport: Codable {

    /// Encodes the event to which this warning is attached as the index in the events array in EdgeRequest
    let eventIndex: Int?

    /// The cause for the `EdgeEventWarning`
    let cause: EdgeEventWarningCause?

    // MARK: - Codable
    enum CodingKeys: String, CodingKey {
        case eventIndex
        case cause
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        // skip eventIndex when encoding
        if let unwrapped = cause { try container.encodeIfPresent(unwrapped, forKey: .cause)}
    }
}

// MARK: - EdgeEventWarningCause

/// Describes the cause for a given `EdgeEventWarning`
struct EdgeEventWarningCause: Codable {

    /// Human-readable summary of the warning cause
    let message: String?

    /// The HTTP status code generated by the server for this occurrence of the problem.
    let code: Int?
}
