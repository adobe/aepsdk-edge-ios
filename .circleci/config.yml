# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/2.0/testing-ios/

version: 2.1

# Workflows orchestrate a set of jobs to be run;
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-and-test

jobs:

  build-and-test:
    macos:
      xcode: 11.1.0 # Specify the Xcode version to use

    steps:
      - checkout

      # restore pods related caches
      - restore_cache:
          keys:
            - cocoapods-cache-v2-{{ arch }}-{{ .Branch }}-{{ checksum "build/xcode/Podfile.lock" }}
            - cocoapods-cache-v2-{{ arch }}-{{ .Branch }}
            - cocoapods-cache-v2

      # install CocoaPods - using default CocoaPods version, not the bundle
      - run: 
          name: Repo Update & Install CocoaPods
          command: make pod-install
      
      # save pods related files
      - save_cache:
          name: Saving CocoaPods Cache
          key: cocoapods-cache-v2-{{ arch }}-{{ .Branch }}-{{ checksum "build/xcode/Podfile.lock" }}
          paths:
            - ./build/xcode/Pods
            - ~/.cocoapods

      - run:
          name: Install SwiftLint
          command: brew install swiftlint && brew cleanup swiftlint

      - run:
          name: Lint Source Code
          comment: swiftlint lint --config tools/format/.swiftlint-ci.yml

      # pre-start the simulator to prevent timeouts
      - run:
          name: Pre-start Simulator
          command: xcrun instruments -w "iPhone 8 (13.1) [" || true

      - run: 
          name: Run Tests
          command: make test

      # code coverage
      - run:
          name: Upload Code Coverage Report
          command: bash <(curl -s https://codecov.io/bash) -v -X s3 -c -D "./build/xcode/AEPExperiencePlatform/out" -J "unitTests" -J "functionalTests" -J "functionalTestsConfig" -t ${CODECOV_TOKEN}

      - run:
          name: Build Universal Library
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              make build-all
            fi

      # verify demo app builds, must build lib before this step
      - run:
          name: Build Demo App
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              make build-app
              make archive-app
            fi

      - store_artifacts:
          path: out



